#include <cstdlib>

#include "gtest/gtest.h"
#include "testing_common.h"

extern "C" {
    #include "momentum_backend.h"
}

const double RSI_REF_DOUBLE[data_len] = {
        100.00000000000000, 100.00000000000000, 100.00000000000000, 100.00000000000000,
        100.00000000000000,  96.25739825599740,  78.90701364804372,  72.12974526092886,
        72.86692382849918,  54.53384069849339,  72.08938801872016,  68.41516330018673,
        71.20080548135459,  64.09159006212391,  54.70419594093941,  54.75498234981233,
        51.37366538534326,  46.36641211482944,  34.60695750293817,  38.88900229412889,
        42.03136925549301,  41.18371707643900,  40.06494724963638,  34.53608021003761,
        39.84547629767282,  36.38667233626698,  33.80554577706820,  33.24390229753503,
        32.61801143878002,  31.87565899924566,  33.63618025817780,  30.64213873734218,
        29.11283886972829,  40.55677353826410,  44.93572853682879,  48.69699891218202,
        54.81182802105524,  57.50069586037796,  59.86112487927482,  58.88194881592243,
        58.81509174730248,  56.38521651546807,  57.91247693282591,  63.38724302979215,
        62.27757413753249,  64.13137009502294,  62.71195007562881,  62.27538302190997,
        55.96123290980827,  61.81984856469659,  61.69448028508939,  57.86122021308213,
        62.82277502180742,  64.29450386330764,  66.33770514874277,  65.90255068271109,
        56.55813353629519,  58.39898001951338,  61.28107318893723,  58.05947582937085,
        60.40705060107074,  63.14466551527125,  61.44389286427465,  58.68670140963144,
        62.34217880278046,  55.33466298934897,  62.23000313985521,  64.30631852053867,
        63.90928683735919,  60.03493716734896,  61.14194655141731,  64.03281222235182,
        61.73811449069662,  67.64798888082808,  57.32848197634250,  49.54265734233129,
        36.58435005089367,  42.16698788881757,  45.06959089653871,  50.79305257539195,
        47.81121760716258,  47.18765152279995,  57.19580216912424,  49.75645276695353,
        48.64991475479461,  53.85807772956984,  57.60359673011219,  57.61321623813230,
        59.85108205547751,  59.58363734672355,  47.19324257055008,  51.45543446554826,
        48.88392036198381,  50.45187132398637,  54.28764504238800,  53.93876163817617,
        50.03931988246719,  54.13840232052485,  58.44166694861575,  58.41279770397405,
        59.39544627962980,  62.07825117529327,  68.23375638857365,  67.37901344763657,
        60.31625113063757,  61.46878468806555,  62.28929910350026,  64.40166007985925,
        61.17489401189029,  55.80174337509030,  57.04702369054166,  55.28483670110354,
        59.61255485187959,  57.57058765907507,  55.64399590218565,  62.20067534638440,
        62.91145900291906,  53.13962804548330,  55.59366554715320,  62.61111814003368,
        62.66244814875670,  58.09339187838285,  61.11256111586631,  64.33235786384957,
        69.73045709795545,  69.10470715347692,  68.04107097516365,  66.14716986743504,
        67.09206937760580,  68.27619469022559,  72.18673121311446,  70.92374753095289,
        73.81255707253453,  74.15606719920338,  76.63182121761790,  78.46130604718124,
        65.56942938545296,  65.50906014325022,  70.81465644805017,  75.93250564723807,
        76.96752848836501,  76.19040080487545,  76.26711181813795,  77.80080601686956,
        78.29063787077104,  79.69081137979110,  79.05106205101127,  80.78800278268257,
        75.85016820748972,  78.28687266610947,  79.25500850260639,  77.01948560492802,
        68.99803231550435,  66.17293186820828,  65.60901519726411,  70.93244409151562,
        65.95051198398710,  69.84351415670412,  68.44292863529830,  61.48836294291115,
        52.69842167658372,  55.99237046258023,  60.90834400691658,  66.32101959631871,
        59.73995041261010,  61.43622755357976,  63.84441271603916,  64.56249988265114,
        68.19990155755167,  72.13190197794526,  72.55861260050784,  71.12982157760315,
        71.38342475267601,  70.01152859142937,  74.20846282498279,  74.43658255460164,
        78.67898911147611,  78.40565048322942,  79.59895733797759,  80.99925164167891,
        84.58372962773500,  77.70369287545617,  79.18367132610716,  75.95355181327594,
        79.08192541750374,  82.39181149601052,  82.71201146895177,  85.41699821999647,
        77.03716408491916,  74.57053790483886,  76.88980834577752,  78.75696030440729,
        74.73259515156042,  75.43965059165433,  76.40249131179854,  74.51090039476604,
        58.61185397894671,  65.92365954635456,  70.23272197874894,  69.56318967284210,
        52.95335220940760,  52.15944175967213,  59.91775125008380,  61.62766367540060,
        64.01822621937833,  58.60170472203898,  59.67974779585361,  57.61743646787124,
        63.00395490771065,  60.46348218221316,  60.52235378150319,  54.07443354160078,
        57.83111452814575,  54.38812233450692,  47.70847274198095,  37.52809978366949,
        32.46134205826088,  36.63036861347157,  28.65622410952068,  28.60014366248888,
        46.52591078662488,  42.26480998201676,  49.33178245742541,  44.99196967279641,
        43.36453249488635,  35.28677707076024,  44.60543992895871,  41.29493599113870,
        33.86567280977130,  45.42647163649778,  37.04167388355134,  40.56048115233136,
        39.18947948619932,  38.75869561420846,  35.32078743574289,  34.29416892058497,
        42.59896473250579,  42.25149629367897,  46.69940890160225,  43.69762621701994,
        46.16021118181348,  46.00084230167258,  41.98427277366395,  43.57827761681574,
        42.47773621604194,  50.52779852820042,  49.45195807591607,  51.86284512075687,
        52.56731640383381,  54.53056936947860,  59.29119216909293,  58.04856125579847,
        58.80446579522105,
};

float RSI_REF_FLOAT[data_len] = {0};

TEST(momentum_backend, RSIDouble_SelfAllocated) {
    int window_size = 14;

    double* out = _RSI_DOUBLE(SAMPLE_CLOSE_DOUBLE, nullptr, data_len, window_size, 0);
    for (int i=0; i<data_len; i++) {
        ASSERT_DOUBLE_EQ(RSI_REF_DOUBLE[i], out[i]);
    }

    free(out);
}

TEST(momentum_backend, RSIDouble_PreAllocated) {
    int window_size = 14;
    double* out = (double*)malloc(data_len*sizeof(double));

    _RSI_DOUBLE(SAMPLE_CLOSE_DOUBLE, out, data_len, window_size, 0);
    for (int i=0; i<data_len; i++) {
        ASSERT_DOUBLE_EQ(RSI_REF_DOUBLE[i], out[i]);
    }

    free(out);
}

TEST(momentum_backend, RSIFloat_SelfAllocated) {
    int window_size = 14;

    float* out = _RSI_FLOAT(SAMPLE_CLOSE_FLOAT, nullptr, data_len, window_size, 0);
    double max_fp_error = get_max_fp_error(RSI_REF_DOUBLE, data_len);
    for (int i=0; i<data_len; i++) {
        // keeping this since it's nice for debugging.
        //printf("%d %f %f %f\n", i, RSI_REF_FLOAT[i], out[i], out[i] - RSI_REF_FLOAT[i]);
        ASSERT_NEAR(RSI_REF_FLOAT[i], out[i], max_fp_error);
    }

    free(out);
}

TEST(momentum_backend, RSIFloat_PreAllocated) {
    int window_size = 14;
    float* out = (float*)malloc(data_len*sizeof(float));
    double max_fp_error = get_max_fp_error(RSI_REF_DOUBLE, data_len);
    _RSI_FLOAT(SAMPLE_CLOSE_FLOAT, out, data_len, window_size, 0);
    for (int i=0; i<data_len; i++) {
        ASSERT_NEAR(RSI_REF_FLOAT[i], out[i], max_fp_error);
    }

    free(out);
}

int main(int argc, char* argv[]) {
    populate_float_arrays();
    for (int i=0; i<data_len; i++) {
        RSI_REF_FLOAT[i] = (float)RSI_REF_DOUBLE[i];
    }
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
