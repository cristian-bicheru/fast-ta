#pragma once
#include <cmath>

// this is the largest the floating point error can be.
// there are deltas seen between float calculations and double calculations.
// this is that max delta.
// to find the max_fp_error, multiply the first number in your data by this factor
const double max_fp_error_factor = 2e-5;
double get_max_fp_error(double x) {
    return fabs(x*max_fp_error_factor);
}

const int data_len = 253;
const double SAMPLE_OPEN_DOUBLE[data_len] = {
        199.460007, 199.539993, 203.119995, 202.830002, 204.429993, 207.360001,
        206.830002, 204.899994, 204.399994, 203.059998, 209.880005, 209.839996,
        210.889999, 204.289993, 205.880005, 201.899994, 200.399994, 197.419998,
        187.710007, 186.410004, 186.270004, 189.910004, 186.929993, 183.520004,
        185.220001, 184.660004, 179.800003, 180.199997, 178.919998, 176.419998,
        177.949997, 176.229996, 175.600006, 175.440002, 184.279999, 183.080002,
        186.509995, 191.809998, 194.860001, 193.949997, 194.699997, 191.550003,
        192.899994, 196.050003, 199.679993, 200.369995, 198.800003, 198.539993,
        198.429993, 197.770004, 200.289993, 198.679993, 203.169998, 201.410004,
        203.279999, 203.350006, 200.809998, 199.199997, 201.850006, 203.309998,
        202.449997, 204.089996, 204.589996, 204.050003, 204.000000, 205.789993,
        203.649994, 208.460007, 207.669998, 208.889999, 207.479996, 208.460007,
        208.759995, 216.419998, 213.899994, 205.529999, 197.990005, 196.309998,
        195.410004, 200.199997, 201.300003, 199.619995, 201.020004, 203.160004,
        203.460007, 204.279999, 210.619995, 210.880005, 212.990005, 213.190002,
        209.429993, 205.860001, 207.860001, 204.100006, 208.500000, 210.160004,
        206.429993, 208.389999, 212.000000, 214.050003, 214.839996, 213.860001,
        218.070007, 224.800003, 220.000000, 217.729996, 219.960007, 221.059998,
        222.009995, 221.380005, 218.949997, 221.029999, 218.550003, 220.000000,
        220.539993, 220.899994, 225.070007, 223.059998, 218.429993, 225.639999,
        226.270004, 225.820007, 227.029999, 227.929993, 232.949997, 234.899994,
        236.389999, 233.369995, 235.089996, 234.589996, 237.520004, 241.160004,
        242.100006, 244.509995, 243.160004, 247.419998, 248.970001, 244.759995,
        247.240005, 249.539993, 257.329987, 257.049988, 256.769989, 258.739990,
        258.690002, 258.299988, 261.549988, 261.130005, 263.750000, 263.679993,
        265.799988, 267.899994, 265.540009, 263.690002, 262.589996, 262.709991,
        266.940002, 265.579987, 266.600006, 267.269989, 258.309998, 261.070007,
        263.790009, 267.480011, 270.000000, 268.600006, 268.809998, 267.779999,
        271.459991, 277.000000, 279.570007, 279.799988, 279.500000, 282.230011,
        280.529999, 284.690002, 284.820007, 291.119995, 289.459991, 289.929993,
        296.239990, 297.149994, 293.790009, 299.839996, 297.160004, 307.239990,
        310.600006, 311.640015, 316.700012, 311.850006, 313.589996, 316.269989,
        317.190002, 318.579987, 317.920013, 320.250000, 310.059998, 312.600006,
        324.450012, 320.540009, 320.929993, 304.299988, 315.309998, 323.519989,
        322.570007, 322.369995, 314.179993, 323.600006, 321.470001, 324.190002,
        324.739990, 315.359985, 320.000000, 322.630005, 318.619995, 297.260010,
        300.950012, 286.529999, 281.100006, 257.260010, 282.279999, 303.670013,
        296.440002, 295.519989, 282.000000, 263.750000, 277.140015, 277.390015,
        255.940002, 264.890015, 241.949997, 247.509995, 239.770004, 247.389999,
        247.179993, 228.080002, 236.360001, 250.750000, 246.520004, 252.750000,
        250.740005, 255.600006, 246.500000, 240.339996, 242.800003, 250.899994,
        270.799988, 262.739990, 268.700012, 268.309998, 280.000000, 282.399994,
        287.380005
};
float SAMPLE_OPEN_FLOAT[data_len] = {0};

const double SAMPLE_CLOSE_DOUBLE[data_len] = {
        199.250000, 203.130005, 203.860001, 204.529999, 207.479996, 207.160004,
        205.279999, 204.300003, 204.610001, 200.669998, 210.520004, 209.149994,
        211.750000, 208.479996, 202.860001, 202.899994, 200.720001, 197.179993,
        185.720001, 188.660004, 190.919998, 190.080002, 189.000000, 183.089996,
        186.600006, 182.779999, 179.660004, 178.970001, 178.229996, 177.380005,
        178.300003, 175.070007, 173.300003, 179.639999, 182.539993, 185.220001,
        190.149994, 192.580002, 194.809998, 194.190002, 194.149994, 192.740005,
        193.889999, 198.449997, 197.869995, 199.460007, 198.779999, 198.580002,
        195.570007, 199.800003, 199.740005, 197.919998, 201.550003, 202.729996,
        204.410004, 204.229996, 200.020004, 201.240005, 203.229996, 201.750000,
        203.300003, 205.210007, 204.500000, 203.350006, 205.660004, 202.589996,
        207.220001, 208.839996, 208.669998, 207.020004, 207.740005, 209.679993,
        208.779999, 213.039993, 208.429993, 204.020004, 193.339996, 197.000000,
        199.039993, 203.429993, 200.990005, 200.479996, 208.970001, 202.750000,
        201.740005, 206.500000, 210.350006, 210.360001, 212.639999, 212.460007,
        202.639999, 206.490005, 204.160004, 205.529999, 209.009995, 208.740005,
        205.699997, 209.190002, 213.279999, 213.259995, 214.169998, 216.699997,
        223.589996, 223.089996, 218.750000, 219.899994, 220.699997, 222.770004,
        220.960007, 217.729996, 218.720001, 217.679993, 221.029999, 219.889999,
        218.820007, 223.970001, 224.589996, 218.960007, 220.820007, 227.009995,
        227.059998, 224.399994, 227.029999, 230.089996, 236.210007, 235.869995,
        235.320007, 234.369995, 235.279999, 236.410004, 240.509995, 239.960007,
        243.179993, 243.580002, 246.580002, 249.050003, 243.289993, 243.259995,
        248.759995, 255.820007, 257.500000, 257.130005, 257.239990, 259.429993,
        260.140015, 262.200012, 261.959991, 264.470001, 262.640015, 265.760010,
        267.100006, 266.290009, 263.190002, 262.010010, 261.779999, 266.369995,
        264.290009, 267.839996, 267.250000, 264.160004, 259.450012, 261.739990,
        265.579987, 270.709991, 266.920013, 268.480011, 270.769989, 271.459991,
        275.149994, 279.859985, 280.410004, 279.739990, 280.019989, 279.440002,
        284.000000, 284.269989, 289.910004, 289.799988, 291.519989, 293.649994,
        300.350006, 297.429993, 299.799988, 298.390015, 303.190002, 309.630005,
        310.329987, 316.959991, 312.679993, 311.339996, 315.239990, 318.730011,
        316.570007, 317.700012, 319.230011, 318.309998, 308.950012, 317.690002,
        324.339996, 323.869995, 309.510010, 308.660004, 318.850006, 321.450012,
        325.209991, 320.029999, 321.549988, 319.609985, 327.200012, 324.869995,
        324.950012, 319.000000, 323.619995, 320.299988, 313.049988, 298.179993,
        288.079987, 292.649994, 273.519989, 273.359985, 298.809998, 289.320007,
        302.739990, 292.920013, 289.029999, 266.170013, 285.339996, 275.429993,
        248.229996, 277.970001, 242.210007, 252.860001, 246.669998, 244.779999,
        229.240005, 224.369995, 246.880005, 245.520004, 258.440002, 247.740005,
        254.809998, 254.289993, 240.910004, 244.929993, 241.410004, 262.470001,
        259.429993, 266.070007, 267.989990, 273.250000, 287.049988, 284.429993,
        286.559998
};
float SAMPLE_CLOSE_FLOAT[data_len] = {0};

const double SAMPLE_HIGH_DOUBLE[data_len] = {
        201.369995, 203.380005, 204.149994, 204.940002, 207.750000, 208.479996,
        207.759995, 205.000000, 205.970001, 203.399994, 215.309998, 212.649994,
        211.839996, 208.839996, 207.419998, 205.339996, 201.679993, 198.850006,
        189.479996, 189.699997, 191.750000, 192.470001, 190.899994, 184.350006,
        188.000000, 185.710007, 180.539993, 182.139999, 180.589996, 179.350006,
        179.229996, 177.990005, 177.919998, 179.830002, 184.990005, 185.470001,
        191.919998, 195.369995, 196.000000, 195.970001, 196.789993, 193.589996,
        194.960007, 200.289993, 199.880005, 200.610001, 200.850006, 200.160004,
        199.259995, 200.990005, 201.570007, 199.500000, 204.490005, 203.130005,
        204.440002, 205.080002, 201.399994, 201.509995, 203.729996, 204.389999,
        204.000000, 205.869995, 206.110001, 205.089996, 205.880005, 206.500000,
        207.229996, 208.910004, 209.149994, 209.240005, 209.729996, 210.639999,
        210.160004, 221.369995, 218.029999, 206.429993, 198.649994, 198.070007,
        199.559998, 203.529999, 202.759995, 202.050003, 212.139999, 206.440002,
        205.139999, 207.160004, 212.729996, 213.350006, 213.649994, 214.440002,
        212.050003, 207.190002, 208.550003, 205.720001, 209.320007, 210.449997,
        206.979996, 209.479996, 213.970001, 214.419998, 216.440002, 216.779999,
        223.710007, 226.419998, 220.789993, 220.130005, 220.820007, 222.850006,
        223.759995, 222.559998, 219.839996, 222.490005, 221.500000, 220.940002,
        220.960007, 224.580002, 228.220001, 223.580002, 220.960007, 227.490005,
        229.929993, 228.059998, 227.789993, 230.440002, 237.639999, 238.130005,
        237.649994, 235.240005, 236.149994, 237.580002, 240.990005, 242.199997,
        243.240005, 244.800003, 246.729996, 249.250000, 249.750000, 245.300003,
        249.169998, 255.929993, 257.850006, 258.190002, 257.489990, 260.350006,
        260.440002, 262.470001, 262.790009, 264.779999, 264.880005, 265.779999,
        267.429993, 268.000000, 266.079987, 264.010010, 263.179993, 266.440002,
        267.160004, 267.980011, 268.000000, 268.250000, 259.529999, 263.309998,
        265.890015, 271.000000, 270.799988, 270.070007, 271.100006, 272.559998,
        275.299988, 280.790009, 281.769989, 281.899994, 281.179993, 282.649994,
        284.250000, 284.890015, 289.980011, 293.970001, 292.690002, 293.679993,
        300.600006, 300.579987, 299.959991, 300.899994, 304.440002, 310.429993,
        312.670013, 317.070007, 317.570007, 315.500000, 315.700012, 318.739990,
        319.019989, 319.989990, 319.559998, 323.329987, 311.769989, 318.399994,
        327.850006, 324.089996, 322.679993, 313.489990, 319.640015, 324.760010,
        325.220001, 323.399994, 321.549988, 323.899994, 327.220001, 326.220001,
        325.980011, 319.750000, 324.570007, 324.649994, 320.450012, 304.179993,
        302.529999, 297.880005, 286.000000, 278.410004, 301.440002, 304.000000,
        303.399994, 299.549988, 290.820007, 278.089996, 286.440002, 281.220001,
        270.000000, 279.920013, 259.079987, 257.609985, 250.000000, 252.839996,
        251.830002, 228.500000, 247.690002, 258.250000, 258.679993, 255.869995,
        255.520004, 262.489990, 248.720001, 245.149994, 245.699997, 263.109985,
        271.700012, 267.369995, 270.070007, 273.700012, 288.250000, 286.329987,
        288.179993
};
float SAMPLE_HIGH_FLOAT[data_len] = {0};

const double SAMPLE_LOW_DOUBLE[data_len] = {
        198.559998, 198.610001, 202.520004, 202.339996, 203.899994, 207.050003,
        205.119995, 202.119995, 203.860001, 199.110001, 209.229996, 208.130005,
        210.229996, 203.500000, 200.830002, 201.750000, 196.660004, 192.770004,
        182.850006, 185.410004, 186.020004, 188.839996, 186.759995, 180.279999,
        184.699997, 182.550003, 177.809998, 178.619995, 177.910004, 176.000000,
        176.669998, 174.990005, 170.270004, 174.520004, 181.139999, 182.149994,
        185.770004, 191.619995, 193.600006, 193.389999, 193.600006, 190.300003,
        192.169998, 195.210007, 197.309998, 198.029999, 198.149994, 198.169998,
        195.289993, 197.350006, 199.570007, 197.050003, 200.649994, 201.360001,
        202.690002, 202.899994, 198.410004, 198.809998, 201.559998, 201.710007,
        202.199997, 204.000000, 203.500000, 203.270004, 203.699997, 202.360001,
        203.610001, 207.289993, 207.169998, 206.729996, 207.139999, 208.440002,
        207.309998, 211.300003, 206.740005, 201.630005, 192.580002, 194.039993,
        193.820007, 199.389999, 199.289993, 199.149994, 200.479996, 202.589996,
        199.669998, 203.839996, 210.029999, 210.320007, 211.600006, 210.750000,
        201.000000, 205.059998, 203.529999, 203.320007, 206.660004, 207.199997,
        204.220001, 207.320007, 211.509995, 212.509995, 211.070007, 211.710007,
        217.729996, 222.860001, 217.020004, 217.559998, 219.119995, 219.440002,
        220.369995, 217.470001, 217.649994, 217.190002, 217.139999, 218.830002,
        217.279999, 220.789993, 224.199997, 217.929993, 215.130005, 223.889999,
        225.839996, 224.330002, 225.639999, 227.300003, 232.309998, 234.669998,
        234.880005, 233.199997, 233.520004, 234.289993, 237.320007, 239.619995,
        241.220001, 241.809998, 242.880005, 246.720001, 242.570007, 241.210007,
        237.259995, 249.160004, 255.380005, 256.320007, 255.369995, 258.109985,
        256.850006, 258.279999, 260.920013, 261.070007, 262.100006, 263.010010,
        264.230011, 265.390015, 260.399994, 261.179993, 260.839996, 262.519989,
        262.500000, 265.309998, 265.899994, 263.450012, 256.290009, 260.679993,
        262.730011, 267.299988, 264.910004, 265.859985, 268.500000, 267.320007,
        270.929993, 276.980011, 278.799988, 279.119995, 278.950012, 278.559998,
        280.369995, 282.920013, 284.700012, 288.119995, 285.220001, 289.519989,
        295.190002, 296.500000, 292.750000, 297.480011, 297.160004, 306.200012,
        308.250000, 311.149994, 312.170013, 309.549988, 312.089996, 315.000000,
        316.000000, 317.309998, 315.649994, 317.519989, 304.880005, 312.190002,
        321.380005, 318.750000, 308.290009, 302.220001, 313.630005, 318.950012,
        320.260010, 318.000000, 313.850006, 318.709991, 321.470001, 323.350006,
        322.850006, 314.609985, 320.000000, 318.209991, 310.500000, 289.230011,
        286.130005, 286.500000, 272.959991, 256.369995, 277.720001, 285.799988,
        293.130005, 291.410004, 281.230011, 263.000000, 269.369995, 271.859985,
        248.000000, 252.949997, 240.000000, 238.399994, 237.119995, 242.610001,
        228.000000, 212.610001, 234.300003, 244.300003, 246.360001, 247.050003,
        249.399994, 252.000000, 239.130005, 236.899994, 238.970001, 249.380005,
        259.000000, 261.230011, 264.700012, 265.829987, 278.049988, 280.630005,
        282.350189
};
float SAMPLE_LOW_FLOAT[data_len] = {0};

const double SAMPLE_VOLUME_DOUBLE[data_len] = {
        25696400, 28906800, 24195800, 19439500, 23323000, 17540600,
        18543200, 18649100, 22204700, 46534900, 64827300, 31996300,
        20892400, 32443100, 38763700, 26339500, 34908600, 41208700,
        57430600, 36529700, 26544700, 33031400, 32879100, 38612300,
        28364800, 29748600, 36529700, 23714700, 27948200, 28481200,
        21218400, 27043600, 40396100, 30968000, 29773400, 22526300,
        30684400, 26220900, 26932900, 18221800, 21674600, 18761500,
        14669100, 26551000, 21124200, 21514000, 47800600, 18220400,
        21070300, 26067500, 20899700, 31110600, 27316700, 16935200,
        11362000, 17265500, 25338600, 20578000, 17897100, 20191800,
        17595200, 16947400, 16866800, 14107500, 18582200, 20929300,
        22277900, 18355200, 14991600, 13909600, 17618900, 21673400,
        33935700, 69281400, 54017900, 40862100, 52393000, 35824800,
        33364400, 27009500, 24619700, 22474900, 47218500, 36547400,
        27227400, 27620400, 24413600, 26884300, 21535400, 22253700,
        46818000, 26043600, 25873300, 15938800, 20990500, 21143400,
        20023000, 19188100, 23913700, 19362300, 27309400, 31777900,
        44289600, 32226700, 39763300, 21158100, 18318700, 25340000,
        22060600, 55413100, 19165500, 31190800, 21903400, 18833500,
        25352000, 25977400, 34805800, 34612300, 28606500, 34619700,
        30576500, 27955000, 18692600, 28253400, 41698900, 24106900,
        21840000, 18475800, 16896300, 24358400, 21811800, 20573400,
        18957200, 17318800, 18369300, 24143200, 35709900, 31130500,
        34790500, 37781300, 25818000, 19974400, 18966100, 23735100,
        17496600, 20455300, 21847200, 25683600, 22295700, 25051600,
        21675800, 19041800, 26558600, 30348800, 16331300, 21005100,
        26301900, 16308900, 11654400, 23621800, 28607600, 16795400,
        18606100, 26518900, 32010600, 22605100, 19689200, 34327600,
        33396900, 32046500, 28539600, 29007100, 24592300, 68994500,
        24643000, 12119700, 23280300, 36566500, 36028600, 25201400,
        33870100, 36580700, 29596800, 27218000, 33019800, 42527100,
        35161200, 30383000, 40488600, 30480900, 27207300, 34454100,
        27710800, 25458100, 26118000, 36634400, 40485000, 40558500,
        54057300, 31685800, 49897100, 43496400, 34154100, 29706700,
        26356400, 29421000, 27337200, 23580800, 28432600, 23686900,
        20028400, 38132800, 23496000, 25141500, 32388500, 55548800,
        57668400, 49513700, 80151400, 106721200, 85349300, 79868900,
        54794600, 46893200, 56544200, 71686200, 71322500, 63899700,
        104618500, 92683000, 80605900, 81014000, 75058400, 67964300,
        100423300, 84188200, 71882800, 75900500, 63021800, 51054200,
        41994100, 49250500, 44054600, 41483500, 32470000, 50455100,
        50721800, 42223800, 40529100, 32755700, 48748700, 32731400,
        33189501
};
float SAMPLE_VOLUME_FLOAT[data_len] = {0};

void populate_float_arrays() {
    // init all the float arrays from the double arrays
    for (int i=0; i<data_len; i++) {
        SAMPLE_OPEN_FLOAT[i] = (float)SAMPLE_OPEN_DOUBLE[i];
    }
    for (int i=0; i<data_len; i++) {
        SAMPLE_CLOSE_FLOAT[i] = (float)SAMPLE_CLOSE_DOUBLE[i];
    }
    for (int i=0; i<data_len; i++) {
        SAMPLE_HIGH_FLOAT[i] = (float)SAMPLE_HIGH_DOUBLE[i];
    }
    for (int i=0; i<data_len; i++) {
        SAMPLE_LOW_FLOAT[i] = (float)SAMPLE_LOW_DOUBLE[i];
    }
    for (int i=0; i<data_len; i++) {
        SAMPLE_VOLUME_FLOAT[i] = (float)SAMPLE_VOLUME_DOUBLE[i];
    }
}